// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime @map("expiresAt")
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String    @id @default(auto()) @map("_id") @db.ObjectId
    name                String?
    email               String?   @unique
    emailVerified       DateTime? @map("verifiedAt")
    image               String?
    createdAt           DateTime  @default(now())
    vpcId               String    @default("")
    awsAccessKey        String    @default("")
    awsSecretAccessKey  String    @default("")
    region              String    @default("")
    configArn           String    @default("")
    kmsKey              String    @default("")
    secretArn           String    @default("")
    subnetID            String[]
    accounts            Account[]
    sessions            Session[]
    clusters            Cluster[]

    @@map("users")
}

model Cluster {
    id                 String     @id @default(auto()) @map("_id") @db.ObjectId
    name               String     @unique
    createdAt          DateTime   @default(now())
    data               Json?
    img                String?
    User               User       @relation(fields: [userId], references: [id])
    userId             String     @db.ObjectId
    securityGroup      String[]
    brokerPerZone      Int
    instanceSize       String
    zones              Int
    storagePerBroker   Int
    kafkaArn           String
    bootStrapServer    String[]
    currentVersion     String? 
    lifeCycleStage     Int         
    brokers            Broker[]
    topics             Topic[]
    consumers          Consumer[]
}



model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime @map("expiresAt")

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Broker {
    brokerid         String   @id @default(auto()) @map("_id") @db.ObjectId
    brokerAddress    String   @unique
    brokerSize       String
    brokerLeader     String
    listNodeResponse Json?
    Cluster          Cluster? @relation(fields: [clusterId], references: [id])
    clusterId        String?  @db.ObjectId
}

model Topic {
    topicid       String   @id @default(auto()) @map("_id") @db.ObjectId
    topicEndpoint String   @unique
    topicCount    String
    Cluster       Cluster? @relation(fields: [clusterId], references: [id])
    clusterId     String?  @db.ObjectId
    topicName        String   
    partitions       Int   
    replication      Int
}

model Consumer {
    consumerid       String   @id @default(auto()) @map("_id") @db.ObjectId
    consumerEndpoint String   @unique
    consumerCount    String
    Cluster          Cluster? @relation(fields: [clusterId], references: [id])
    clusterId        String?  @db.ObjectId
}